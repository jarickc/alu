library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
use ieee.numeric_std.all;

entity State_Machine is
Port (
    io_led : out STD_LOGIC_VECTOR(23 downto 0);
    io_dip : in STD_LOGIC_VECTOR(23 downto 0);
    clk : in STD_LOGIC;
    io_seg : out STD_LOGIC_VECTOR(7 downto 0);
    io_sel : out STD_LOGIC_VECTOR(3 downto 0);
    io_op : in STD_LOGIC_VECTOR(4 downto 0);
    rst_n : in STD_LOGIC
);
end State_Machine;

architecture Behavioral of State_Machine is

    type machine is(init, toin, in1, toin2, in2, toop, operation, toresult, result); -- States, from first to last.
    type choose is(add, sub, mul, div, comp); -- Possible operations to choose from.
    signal state : machine := init;
    signal oper_sel : choose;

  signal input_BCD : STD_LOGIC_VECTOR(3 downto 0);   
  -- Breaks up BCD_result into 4 digits and cycles very quickly.
  signal BCD_result : STD_LOGIC_VECTOR(15 downto 0);
  -- The connection between the code and the display. (In BCD)
  signal operand_1 : STD_LOGIC_VECTOR(15 downto 0);
  -- Input from DIP switches during state "in1".
  signal operand_2 : STD_LOGIC_VECTOR(15 downto 0);
  -- Input from DIP switches during state "in2".
  signal output : STD_LOGIC_VECTOR(15 downto 0);
  -- Result from ALU calculations.
  signal flipflop : STD_LOGIC_VECTOR(1 downto 0) := "00";
  -- Used to require a consistent input from certain buttons.
  signal io_segCount : STD_LOGIC_VECTOR(19 downto 0);
  -- Counts to 100 million for switch debouncer.
  signal io_segActivate : STD_LOGIC_VECTOR(1 downto 0);
  -- Rapidly changes which digit is powered on 7 segment display.
  signal addsub : STD_LOGIC_VECTOR(16 downto 0);
  -- Intermediate variable for cout analysis.
  signal cout : STD_LOGIC;
  -- Detects if a number goes negative or over 9999.
  signal ln : STD_LOGIC_VECTOR(1 downto 0);
  -- "letter or number" divides 7 segment display decoder into 2 groups.
  signal mul_v : STD_LOGIC_VECTOR(31 downto 0);
  -- Intermediate variable that captures the computer's multiplication.
  function to_bcd ( bin : std_logic_vector(15 downto 0) ) return std_logic_vector is
    -- Used to convert a binary input to BCD.
    variable i : integer:=0;
    -- Counts shifts.
    variable bcd : std_logic_vector(15 downto 0) := (others => '0');
    -- The "scratch" space.
    variable bint : std_logic_vector(15 downto 0) := bin;
    -- The input. "bin" is given values throughout the code.
  begin
    for i in 0 to 15 loop
    -- repeats 16 times to shift all digits.
    bcd := bcd(14 downto 0) & bint(15);
    bint := bint(14 downto 0) & bcd(15);
    -- Shifts the bits left.

    -- Adds 3 if any BCD digit is greater than 4.
    if(i < 15 and bcd(3 downto 0) > "0100") then
      bcd(3 downto 0) := bcd(3 downto 0) + "0011";
    end if;
    if(i < 15 and bcd(7 downto 4) > "0100") then --add 3 if BCD digit is greater than 4.
      bcd(7 downto 4) := bcd(7 downto 4) + "0011";
    end if;
    if(i < 15 and bcd(11 downto 8) > "0100") then  --add 3 if BCD digit is greater than 4.
      bcd(11 downto 8) := bcd(11 downto 8) + "0011";
    end if;
    if(i < 15 and bcd(15 downto 12) > "0100") then  --add 3 if BCD digit is greater than 4.
      bcd(15 downto 12) := bcd(15 downto 12) + "0011";
    end if;
    end loop;
    return bcd;
  end to_bcd;

begin -- Architecture begins.

  io_segActivate <= io_segCount (19 downto 18);
  -- Refreshes io_segActivate every 10.5 ms.
  process(rst_n, io_op, clk)
    VARIABLE count :  INTEGER RANGE 0 TO 150000000 := 0;
    VARIABLE init_count : INTEGER RANGE 0 to 100000000 := 0;
  begin
    if (rst_n = '0') then
    -- Reset state, has priority over all states.
        io_seg <= "10101111";
        state <= init;
        io_led(23 downto 0) <= "000000000000000000000000";
        io_segCount <= "00000000000000000000";
        io_sel <= "0111";
    elsif (clk'EVENT and clk = '1') then
    -- Rising edge of clock

    -- Counts up to 100000000, then restarts. Used to cycle digit selection.
    io_segCount <= io_Segcount + 1;
    if (io_segCount = "11111111111111111111") then
      io_segCount <= "00000000000000000000";
    end if;

                  -- Case statements used in the program.

    -- Decodes BCD inputs into the 7 segmnet display.
    if (ln = "11") then
    -- If numbers are desired
      case (input_BCD) is
        when "0000" => io_seg <= "11000000"; -- Zero
        when "0001" => io_seg <= "11111001"; -- One or I
        when "0010" => io_seg <= "10100100"; -- Two
        when "0011" => io_seg <= "10110000"; -- Three
        when "0100" => io_seg <= "10011001"; -- Four
        when "0101" => io_seg <= "10010010"; -- Five or S
        when "0110" => io_seg <= "10000010"; -- Six
        when "0111" => io_seg <= "11111000"; -- Seven or T
        when "1000" => io_seg <= "10000000"; -- Eight
        when "1001" => io_seg <= "10010000"; -- Nine
        when "0110" => io_seg <= "11000110"; -- Less than
        when "1010" => io_seg <= "11110000"; -- Greater than
        when "1111" => io_seg <= "10111110"; -- Equal to
		    when others => io_seg <= "11111111";
	    end case;
    end if;
    if (ln = "00") then
    -- If messages are desired
	    case (input_BCD) is
	    when "0111" => io_seg <= "10100100"; -- 2
	    when "1110" => io_seg <= "10001100"; -- P
        when "1100" => io_seg <= "10001000"; -- A
        when "1111" => io_seg <= "10100001"; -- D
        when "1010" => io_seg <= "11000001"; -- U
        when "1101" => io_seg <= "10000011"; -- B
        when "1011" => io_seg <= "10101011"; -- N
        when "1000" => io_seg <= "11000000"; -- O
        when "0101" => io_seg <= "10010010"; -- S or 5
        when "0011" => io_seg <= "11111001"; -- 1
        when "1001" => io_seg <= "11111011"; -- I
        when "0100" => io_seg <= "11001000"; -- Kind of an M
        when "0001" => io_seg <= "11000111"; -- L
        when others => io_seg <= "11111111"; -- Nothing Displayed
      end case;
    end if;
    if (ln = "01") then 
    -- Animation frames and error letters
        case(input_BCD) is
        when "1000" => io_seg <= "11110011"; -- Bottom left hand
        when "0100" => io_seg <= "10111011"; -- Middle left hand
        when "0010" => io_Seg <= "11111000"; -- Top left hand
        when "1100" => io_seg <= "11100111"; -- Bottom right hand
        when "0011" => io_seg <= "10101111"; -- Middle right hand
        when "0101" => io_seg <= "11001110"; -- Top right hand
        when "1010" => io_seg <= "11100101"; -- Left smile
        when "1011" => io_seg <= "11010011"; -- Right smile
        when "1111" => io_seg <= "10011101"; -- Smile up
        when "0001" => io_seg <= "10101111"; -- r
        when "0110" => io_seg <= "10000110"; -- E
        when others => io_seg <= "11111111"; -- Nothing
        end case;
    end if;
    if (ln = "10") then
    -- Init animation
        case (input_BCD) is
            when "1000" => io_seg <= "10001001"; -- H
            when "0100" => io_seg <= "11111001"; -- I
            when "0010" => io_seg <= "11110110"; -- Eyes
            when "0001" => io_seg <= "11110000"; -- ]
            when "1111" => io_seg <= "10111111"; -- Nose
            when others => io_seg <= "11111111"; -- Nothing
        end case;
    end if;
    
    -- The ALU section of the code.
    case (oper_sel) is
      when add =>
        addsub <= ('0' & operand_1) + ('0' & operand_2);
        output <= operand_1 + operand_2;
        cout <= addsub(16);
      when sub =>
        addsub <= ('0' & operand_1) - ('0' & operand_2);
        if (operand_1 = operand_2) then
          output <= "0000000000000000";
        else
          cout <= addsub(16);
          output <= operand_1 - operand_2;
        end if;
      when mul =>
        mul_v <= operand_1 * operand_2;
        if (mul_v(31 downto 16) > "0000000000000000") then
            output <= "1111111111111111";
        elsif (operand_1 = "0000000000000000" or operand_2 = "0000000000000000") then
            output <= "0000000000000000";
        else
            output <= mul_v(15 downto 0);
        end if;
      when comp =>
        ln <= "11";
        if (operand_1 < operand_2) then
            BCD_result <= "000101100010"; -- 1 is less than 2
        elsif (operand_1 > operand_2) then
            BCD_result <= "000110100010"; -- 1 is greater than 2
        if (operand_1 = operand_2) then
            BCD_result <= "000111110010"; -- 1 is less than 2
        end if;
      when others =>
		BCD_result <= "1011100000000000"; -- NO
    end case;

    -- Allows different numbers to be displayed at the "same time".
    case (io_segActivate) is
      when "00" => -- First digit
        io_sel <= "0111";
        input_BCD <= BCD_result(15 downto 12);
      when "01" => -- Second digit
        io_sel <= "1011";
        input_BCD <= BCD_result(11 downto 8);
      when "10" => -- Third digit
        io_sel <= "1101";
        input_BCD <= BCD_result(7 downto 4);
      when "11" => -- Fourth digit
        io_sel <= "1110";
        input_BCD <= BCD_result(3 downto 0);
		  when others =>
		    io_sel <= "1111";
    end case;

    -- The state machine.
    case (state) is
      -- First state if no reset.
      when init =>
      
        io_led(0) <= '1';
        ln <= "10";
        init_count := init_count + 1;
        if (init_count < 50000000) then 
            BCD_result <= "1000010000000000"; -- HI
        elsif (init_count > 50000000) then 
            BCD_result <= "0000001011110001"; -- :-]
        elsif (init_count = 100000000) then
            init_count := 0;
        end if;

        -- Switch Debouncer
        flipflop(0) <= io_op(0);                        -- Store button value in 1st flipflop
     	flipflop(1) <= flipflop(0);                     -- Update at different cycles to check for consistency                              -- Store 1st flipflop value in 2nd flipflop
     	If (flipflop(0) /= flipflop(1)) THEN            -- Reset counter because input is changing
       	  count := 0;                                   -- Clear the counter whenever they are not equal
     	ELSIF(count < 100000000 and flipflop(1) = '1') THEN  -- Stable input time is not yet met and the button is still pressed
      	  count := count + 1;                           -- Increment counter
      	ELSIF (count = 100000000) then                  -- Stable input time is met
       	  state <= toin;                                 -- Changes state
       	  count := 0;                                   -- Reset
      	END IF;

--Inbetween state that displays a message
      when toin =>
        ln <= "00"; -- Displaying letters
        BCD_result <= "0011101100110000"; -- "In 1"
      	count := count + 1;                           -- Increment counter
      	IF (count = 150000000) then                  -- Time is met
       	  state <= in1;                                 -- Changes state
       	  count := 0;                                   -- Reset count
      	END IF;
      	
      -- State that determines first input.
      when in1 =>
         io_led(1) <= '1';
		 ln <= "11";
		 operand_1 <= io_dip(23 downto 8);
         
        if (operand_1 > "10011100001111") then
            ln <= "01";
            BCD_result <= "0110000100010000"; -- ERR
        else
            BCD_result <= to_bcd(io_dip(23 downto 8));
        end if;
        
        -- Switch Debouncer
        flipflop(0) <= io_op(0);                        -- Store button value in 1st flipflop
     	flipflop(1) <= flipflop(0);                     -- Update at different cycles to check for consistency
     	If (flipflop(0) /= flipflop(1)) THEN            -- Reset counter because input is changing
       	  count := 0;                                   -- Clear the counter whenever they are not equal
     	ELSIF(count < 100000000 and flipflop(1) = '1') THEN  -- Stable input time is not yet met and the button is still pressed
      	  count := count + 1;                           -- Increment counter
      	ELSIF (count = 100000000) then                  -- Stable input time is met
       	  state <= toin2;                                 -- Changes state
       	  count := 0;                                   -- Reset
      	END IF;

      -- Inbetween state
      when toin2 =>
        ln <= "00"; -- Displaying letters
        BCD_result <= "0011101101110000"; -- "In 2"
      	count := count + 1;                           -- Increment counter
      	IF (count = 150000000) then                  -- Time is met
       	  state <= in2;                                 -- Changes state
       	  count := 0;                                   -- Reset count
      	END IF;

      -- State that determines second input.
      when in2 =>
         io_led(2) <= '1'; -- Indicator
	     ln <= "11";
		 operand_2 <= io_dip(23 downto 8);

         if (operand_2 > "10011100001111") then
            ln <= "01";
            BCD_result <= "0110000100010000"; -- ERR
         else
            BCD_result <= to_bcd(io_dip(23 downto 8));
         end if;

         -- Switch Debouncer
         flipflop(0) <= io_op(0);                        -- Store button value in 1st flipflop
      	 flipflop(1) <= flipflop(0);                     -- Update at different cycles to check for consistency
      	 If (flipflop(0) /= flipflop(1)) THEN            -- Reset counter because input is changing
           count := 0;                                   -- Clear the counter whenever they are not equal
      	 ELSIF(count < 100000000 and flipflop(1) = '1') THEN  -- Stable input time is not yet met and the button is still pressed
       	   count := count + 1;                           -- Increment counter
       	 ELSIF (count = 100000000) then                  -- Stable input time is met
           state <= toop;                                 -- Changes state
           count := 0;                                   -- Reset
       	 END IF;

      -- Inbetween state
      when toop =>
        ln <= "00"; -- Displaying letters
        BCD_result <= "1000111000000000"; -- "op"
        state <= operation;

      -- State that selects operation.
      when operation =>
     	io_led(3) <= '1'; -- Indicator
        if (io_op(1) = '1') then -- Selecting Addition
          ln <= "00";
			    BCD_result <= "1100111111110000"; -- ADD
			    oper_sel <= add;
		    end if;
        if (io_op(2) = '1') then -- Selecting Subtraction
          ln <= "00";
			    BCD_result <= "0101101011010000"; -- SUB
			    oper_sel <= sub;
		    end if;
        if (io_op(3) = '1') then -- Selecting Multiplication
          ln <= "00";
			    BCD_result <= "0100101000010000"; -- MUL
			    oper_sel <= mul;
		end if;
        if (io_op(4) = '1') then -- Selecting Division
          ln <= "00";
			    BCD_result <= "1111100110100000"; -- DIV
			    oper_sel <= comp;
		end if;
        -- Switch Debouncer
        flipflop(0) <= io_op(0);                        -- Store button value in 1st flipflop
     	flipflop(1) <= flipflop(0);                     -- Update at different cycles to check for consistency
     	If (flipflop(0) /= flipflop(1)) THEN            -- Reset counter because input is changing
       	  count := 0;                                   -- Clear the counter whenever they are not equal
     	ELSIF(count < 100000000 and flipflop(1) = '1') THEN  -- Stable input time is not yet met and the button is still pressed
      	  count := count + 1;                           -- Increment counter
      	ELSIF (count = 100000000) then                  -- Stable input time is met
       	  state <= toresult;                                 -- Changes state
       	  count := 0;                                   -- Reset
      	END IF;

      when toresult => -- Dance party!
        ln <= "01";
        count := count + 1;
        if (count = 10000000 or count = 50000000 or count = 90000000 or count = 130000000) then 
            BCD_result <= "1000101010110101"; 
        elsif (count = 20000000 or count = 60000000 or count = 100000000 or count = 140000000) then 
            BCD_result <= "0100101010110011"; 
        elsif (count = 30000000 or count = 70000000 or count = 110000000) then 
            BCD_result <= "0010111111111100"; 
        elsif (count = 40000000 or count = 80000000 or count = 120000000) then 
            BCD_result <= "0100111111110011";
        elsif (count = 150000000) then
            count := 0;
            state <= result;
        end if;
        
      -- State that displays result. Requires reset to continue.
      when result =>
        io_led(4) <= '1';
        ln <= "11";
        if (output > "10011100001111") then
            ln <= "01";
            BCD_result <= "0110000100010000"; -- ERR
        else
            BCD_result <= to_bcd(output);
        end if;
      end case;
    end if;
  end process;
end Behavioral;
